{"version":3,"file":"static/js/453.a756bdbf.chunk.js","mappings":"wPA+EA,EAtEmB,WACf,OAAoCA,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAgDF,EAAAA,EAAAA,WAAS,GAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAAsCN,EAAAA,EAAAA,WAAS,GAA/C,eAAOO,EAAP,KAAoBC,EAApB,KAEA,GAAuCC,EAAAA,EAAAA,KAAhCC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,cAEvBC,EAAAA,EAAAA,YAAU,WACNC,EAAUT,GAAQ,KACnB,IAEH,IAAMS,EAAY,SAACT,EAAQU,GACvBX,GAAqBW,GACrBH,EAAaP,GACRW,KAAKC,IAGRA,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACRD,EAAcE,OAAS,IACvBD,GAAQ,GAGZjB,EAAc,GAAD,eAAKD,IAAL,OAAoBiB,KACjCd,GAAoB,GACpBE,GAAU,SAAAD,GAAM,OAAIA,EAAS,KAC7BG,EAAeW,IAuBnB,IAAME,EAAeV,GAAQ,SAACW,EAAA,EAAD,IAAkB,KACzCC,EAAUb,IAAYP,GAAmB,SAACqB,EAAA,EAAD,IAAa,KACtDC,EAtBN,SAAqBxB,GACjB,IAAMwB,EAAQxB,EAAWyB,KAAI,SAACC,EAAMC,GAChC,OACI,eAAIC,UAAU,eAAd,UACI,UAAC,KAAD,CAAMC,GAAE,kBAAaH,EAAKI,IAA1B,WACI,gBAAKC,IAAKL,EAAKM,UAAWC,IAAKP,EAAKQ,MAAON,UAAU,sBACrD,gBAAKA,UAAU,oBAAf,SAAoCF,EAAKQ,SACzC,gBAAKN,UAAU,qBAAf,SAAqCF,EAAKS,YAJhBR,MAU1C,OACI,eAAIC,UAAU,eAAd,SACKJ,IAOCY,CAAYpC,GAE1B,OACI,iBAAK4B,UAAU,eAAf,UACKR,EACAE,EACAE,GACD,mBACIa,QAAS,kBAAMxB,EAAUT,IACzBkC,SAAUpC,EACVqC,MAAO,CAACC,QAASlC,EAAc,OAAS,SACxCsB,UAAU,mCAJd,UAKI,gBAAKA,UAAU,QAAf,6BCpDhB,EAhBmB,WACf,OACI,iCACI,UAACa,EAAA,EAAD,YACI,iBACIC,KAAK,cACLC,QAAQ,kCAEZ,+CAEJ,SAACC,EAAA,EAAD,KACA,SAAC,EAAD,S,+ECZG,SAASC,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelSerice from '../../services/MarvelSerice';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newComicsLoading, setNewComicsLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelSerice();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n    \n    const onRequest = (offset, initial) => {\n        setNewComicsLoading(!initial)\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true\n        }\n\n        setComicsList([...comicsList, ...newComicsList])\n        setNewComicsLoading(false)\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended)\n    }\n\n    function renderItems(comicsList) {\n        const items = comicsList.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newComicsLoading ? <Spinner/> : null;\n    const items = renderItems(comicsList)\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                onClick={() => onRequest(offset)}\n                disabled={newComicsLoading}\n                style={{display: comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useState","comicsList","setComicsList","newComicsLoading","setNewComicsLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelSerice","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","errorMessage","ErrorMessage","spinner","Spinner","items","map","item","i","className","to","id","src","thumbnail","alt","title","price","renderItems","onClick","disabled","style","display","Helmet","name","content","AppBanner","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}