{"version":3,"file":"static/js/988.d649479b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelSerice.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} alt=\"error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelSerice from '../../services/MarvelSerice';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = (props) => {\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelSerice();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, (30000))\n\n        // return () => {\n        //     clearInterval(timerId)\n        // }\n    }, [])\n    \n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const updateChar = () => {\n        clearError(); \n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View onCharSelected= {props.onCharSelected} char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char, onCharSelected}) => {\n    const {thumbnail, name, description, homepage, wiki, id} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || \n        thumbnail ===  'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n    \n    return (\n        <div className=\"randomchar__block\">\n            <img style={imgStyle} \n                  src={thumbnail} \n                  alt=\"Random character\" \n                  onClick={() => onCharSelected(id)}\n                  className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">\n                    <Link to={`/characters/${id}`}>{name}</Link>\n                </p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelSerice from '../../services/MarvelSerice';\n\nimport './charList.scss';\n\nconst  CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelSerice();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true) ;\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(charList) {\n        const items = charList.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n                imgStyle = {'objectFit' : 'unset'}\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={i}\n                        key={item.id}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id)\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id)\n                                focusOnItem(i)\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    } \n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                onClick={() => onRequest(offset)}\n                disabled={newItemLoading}\n                style={{display: charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelSerice from '../../services/MarvelSerice';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst  CharInfo = (props) => {\n    const [char, setChar] = useState(null)\n\n    // const [classCharInfo, setClassCharInfo] = useState('char__info')\n\n    const {loading, error, getCharacter, clearError} = useMarvelSerice();\n\n    useEffect(() => {\n        updateChar()\n        // window.addEventListener('scroll', changePositionBlock)\n\n        // return () => {\n        //     window.removeEventListener('scroll', changePositionBlock);\n        // }\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        \n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n    \n    // const changePositionBlock = () => {\n    //     if (window.scrollY >= 425) {\n    //         setClassCharInfo('char__info char__info_fixed')\n    //     } else {\n    //         setClassCharInfo('char__info')\n    //     }\n    // }\n\n    const skeleton =  char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className='char__info'>\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || \n        thumbnail ===  'http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif') {\n        imgStyle = {'objectFit' : 'contain'}\n    }\n\n    const shortComicsList = (comics) => {\n        const newArr = [];\n            try {\n                for (let i = 0; i < (comics.length < 10 ? comics.length : 10); i++) {\n                    const comicUrl = comics[i].resourceURI\n                    const comicId = comicUrl.slice(comicUrl.length - 8, comicUrl.length).replace(/\\D/g , '');\n                    const elem = (\n                        <li key={i} className=\"char__comics-item\">\n                            <Link to={`/comics/${comicId}`}>{comics[i].name}</Link>\n                        </li>\n                    );\n                    newArr.push(elem);\n                }\n                return newArr;\n            } catch (e) {\n                console.log(e);\n            }\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">\n                        <Link to={`/characters/${char.id}`}>{name}</Link>\n                    </div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    comics.length > 0 ? shortComicsList(comics) : 'There is no comics with this character'\n                }\n                    \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelSerice from \"../../services/MarvelSerice\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './CharSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelSerice();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage/></div> : null\r\n    const results = !char ? null : char.length > 0 ? \r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">\r\n                            There is! Visit {char[0].name} page?\r\n                        </div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName)\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label \r\n                        className=\"char__search-label\" \r\n                        htmlFor=\"charName\">\r\n                            Or find a character by name:\r\n                    </label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errinfo) {\r\n        console.log(error, errinfo);\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar onCharSelected={onCharSelected}/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelSerice = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n    \r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d9c743675863ced839ca78419759170d';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 10) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n\r\n\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description ? \r\n                `${comic.description.length >= 600 ? comic.description.slice(0, 600) + '[...]' : comic.description}` : 'There is no description',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} pages` : 'No information about the number of pages',\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'NOT AVAILABLE',\r\n            thumbnail: `${comic.thumbnail.path}.${comic.thumbnail.extension}`,\r\n            language: comic.textObjects[0] ? comic.textObjects[0].language : 'No information about language'\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? \r\n                `${char.description.length >= 150 ? char.description.slice(0, 150) + \"...\" : char.description}` : \r\n                'This character hasn\\'t description.',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelSerice;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true)\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json()\r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n        } catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n\r\n    return {loading, error, request, clearError}\r\n}"],"names":["src","img","style","display","width","height","objectFit","margin","alt","View","char","onCharSelected","thumbnail","name","description","homepage","wiki","id","imgStyle","className","onClick","to","href","props","useState","setChar","useMarvelSerice","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","mjolnir","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","newArr","comicUrl","resourceURI","comicId","slice","replace","elem","push","console","log","shortComicsList","charId","skeleton","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errinfo","this","setState","children","Component","selectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","comic","title","pageCount","price","prices","path","extension","language","textObjects","urls"],"sourceRoot":""}